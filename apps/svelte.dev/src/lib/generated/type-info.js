/* This file is generated by running `pnpm generate`
   in the sites/svelte.dev directory — do not edit it */
export const modules = /** @type {import('@sveltejs/site-kit/markdown').Modules} */ ([
  {
    "name": "$derived",
    "comment": "",
    "types": [],
    "exports": [
      {
        "name": "apply",
        "snippet": "const apply: never;",
        "children": []
      },
      {
        "name": "arguments",
        "snippet": "const arguments: never;",
        "children": []
      },
      {
        "name": "bind",
        "snippet": "const bind: never;",
        "children": []
      },
      {
        "name": "by",
        "comment": "Sometimes you need to create complex derivations that don't fit inside a short expression.\nIn these cases, you can use `$derived.by` which accepts a function as its argument.\n\nExample:\n```ts\nlet total = $derived.by(() => {\n  let result = 0;\n for (const n of numbers) {\n   result += n;\n  }\n  return result;\n});\n```\n\nhttps://svelte-5-preview.vercel.app/docs/runes#$derived-by",
        "snippet": "function by<T>(fn: () => T): T;",
        "children": []
      },
      {
        "name": "call",
        "snippet": "const call: never;",
        "children": []
      },
      {
        "name": "caller",
        "snippet": "const caller: never;",
        "children": []
      },
      {
        "name": "length",
        "snippet": "const length: never;",
        "children": []
      },
      {
        "name": "name",
        "snippet": "const name: never;",
        "children": []
      },
      {
        "name": "prototype",
        "snippet": "const prototype: never;",
        "children": []
      },
      {
        "name": "toString",
        "snippet": "const toString: never;",
        "children": []
      }
    ]
  },
  {
    "name": "$effect",
    "comment": "",
    "types": [],
    "exports": [
      {
        "name": "active",
        "comment": "The `$effect.active` rune is an advanced feature that tells you whether or not the code is running inside an effect or inside your template.\n\nExample:\n```svelte\n<script>\n  console.log('in component setup:', $effect.active()); // false\n\n  $effect(() => {\n    console.log('in effect:', $effect.active()); // true\n  });\n</script>\n\n<p>in template: {$effect.active()}</p> <!-- true -->\n```\n\nThis allows you to (for example) add things like subscriptions without causing memory leaks, by putting them in child effects.\n\nhttps://svelte-5-preview.vercel.app/docs/runes#$effect-active",
        "snippet": "function active(): boolean;",
        "children": []
      },
      {
        "name": "apply",
        "snippet": "const apply: never;",
        "children": []
      },
      {
        "name": "arguments",
        "snippet": "const arguments: never;",
        "children": []
      },
      {
        "name": "bind",
        "snippet": "const bind: never;",
        "children": []
      },
      {
        "name": "call",
        "snippet": "const call: never;",
        "children": []
      },
      {
        "name": "caller",
        "snippet": "const caller: never;",
        "children": []
      },
      {
        "name": "length",
        "snippet": "const length: never;",
        "children": []
      },
      {
        "name": "name",
        "snippet": "const name: never;",
        "children": []
      },
      {
        "name": "pre",
        "comment": "Runs code right before a component is mounted to the DOM, and then whenever its dependencies change, i.e. `$state` or `$derived` values.\nThe timing of the execution is right before the DOM is updated.\n\nExample:\n```ts\n$effect.pre(() => console.log('The count is now ' + count));\n```\n\nIf you return a function from the effect, it will be called right before the effect is run again, or when the component is unmounted.\n\nDoes not run during server side rendering.\n\nhttps://svelte-5-preview.vercel.app/docs/runes#$effect-pre",
        "snippet": "function pre(fn: () => void | (() => void)): void;",
        "children": []
      },
      {
        "name": "prototype",
        "snippet": "const prototype: never;",
        "children": []
      },
      {
        "name": "root",
        "comment": "The `$effect.root` rune is an advanced feature that creates a non-tracked scope that doesn't auto-cleanup. This is useful for\nnested effects that you want to manually control. This rune also allows for creation of effects outside of the component\ninitialisation phase.\n\nExample:\n```svelte\n<script>\n  let count = $state(0);\n\n  const cleanup = $effect.root(() => {\n    $effect(() => {\n\t\t\tconsole.log(count);\n\t\t})\n\n     return () => {\n       console.log('effect root cleanup');\n\t\t\t}\n  });\n</script>\n\n<button onclick={() => cleanup()}>cleanup</button>\n```\n\nhttps://svelte-5-preview.vercel.app/docs/runes#$effect-root",
        "snippet": "function root(fn: () => void | (() => void)): () => void;",
        "children": []
      },
      {
        "name": "toString",
        "snippet": "const toString: never;",
        "children": []
      }
    ]
  },
  {
    "name": "$state",
    "comment": "",
    "types": [],
    "exports": [
      {
        "name": "apply",
        "snippet": "const apply: never;",
        "children": []
      },
      {
        "name": "arguments",
        "snippet": "const arguments: never;",
        "children": []
      },
      {
        "name": "bind",
        "snippet": "const bind: never;",
        "children": []
      },
      {
        "name": "call",
        "snippet": "const call: never;",
        "children": []
      },
      {
        "name": "caller",
        "snippet": "const caller: never;",
        "children": []
      },
      {
        "name": "frozen",
        "comment": "Declares reactive read-only state that is shallowly immutable.\n\nExample:\n```ts\n<script>\n  let items = $state.frozen([0]);\n\n  const addItem = () => {\n    items = [...items, items.length];\n  };\n</script>\n\n<button on:click={addItem}>\n  {items.join(', ')}\n</button>\n```\n\nhttps://svelte-5-preview.vercel.app/docs/runes#$state-raw",
        "snippet": "function frozen<T>(initial: T): Readonly<T>;",
        "children": []
      },
      {
        "name": "frozen",
        "comment": "",
        "snippet": "function frozen<T>(): Readonly<T> | undefined;",
        "children": []
      },
      {
        "name": "length",
        "snippet": "const length: never;",
        "children": []
      },
      {
        "name": "name",
        "snippet": "const name: never;",
        "children": []
      },
      {
        "name": "prototype",
        "snippet": "const prototype: never;",
        "children": []
      },
      {
        "name": "snapshot",
        "comment": "To take a static snapshot of a deeply reactive `$state` proxy, use `$state.snapshot`:\n\nExample:\n```ts\n<script>\n  let counter = $state({ count: 0 });\n\n  function onclick() {\n    // Will log `{ count: ... }` rather than `Proxy { ... }`\n    console.log($state.snapshot(counter));\n  };\n</script>\n```\n\nhttps://svelte-5-preview.vercel.app/docs/runes#$state.snapshot",
        "snippet": "function snapshot<T>(state: T): T;",
        "children": []
      },
      {
        "name": "toString",
        "snippet": "const toString: never;",
        "children": []
      }
    ]
  },
  {
    "name": "svelte",
    "comment": "",
    "types": [
      {
        "name": "ComponentConstructorOptions",
        "snippet": "interface ComponentConstructorOptions<\n\tProps extends Record<string, any> = Record<string, any>\n> {/*…*/}",
        "children": [
          {
            "name": "target",
            "snippet": "target: Element | Document | ShadowRoot;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "anchor",
            "snippet": "anchor?: Element;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "props",
            "snippet": "props?: Props;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "context",
            "snippet": "context?: Map<any, any>;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "hydrate",
            "snippet": "hydrate?: boolean;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "intro",
            "snippet": "intro?: boolean;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "$$inline",
            "snippet": "$$inline?: boolean;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ],
        "deprecated": "Svelte components were classes in Svelte 4. In Svelte 5, thy are not anymore.\nUse `mount` or `createRoot` instead to instantiate components.\nSee [breaking changes](https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes)\nfor more info."
      },
      {
        "name": "ComponentEvents",
        "comment": "Convenience type to get the events the given component expects. Example:\n```html\n<script lang=\"ts\">\n   import type { ComponentEvents } from 'svelte';\n   import Component from './Component.svelte';\n\n   function handleCloseEvent(event: ComponentEvents<Component>['close']) {\n      console.log(event.detail);\n   }\n</script>\n\n<Component on:close={handleCloseEvent} />\n```",
        "snippet": "type ComponentEvents<Comp extends SvelteComponent> =\n\tComp extends SvelteComponent<any, infer Events>\n\t\t? Events\n\t\t: never;",
        "children": []
      },
      {
        "name": "ComponentProps",
        "comment": "Convenience type to get the props the given component expects. Example:\n```html\n<script lang=\"ts\">\n\timport type { ComponentProps } from 'svelte';\n\timport Component from './Component.svelte';\n\n\tconst props: ComponentProps<Component> = { foo: 'bar' }; // Errors if these aren't the correct props\n</script>\n```",
        "snippet": "type ComponentProps<Comp extends SvelteComponent> =\n\tComp extends SvelteComponent<infer Props> ? Props : never;",
        "children": []
      },
      {
        "name": "ComponentType",
        "comment": "Convenience type to get the type of a Svelte component. Useful for example in combination with\ndynamic components using `<svelte:component>`.\n\nExample:\n```html\n<script lang=\"ts\">\n\timport type { ComponentType, SvelteComponent } from 'svelte';\n\timport Component1 from './Component1.svelte';\n\timport Component2 from './Component2.svelte';\n\n\tconst component: ComponentType = someLogic() ? Component1 : Component2;\n\tconst componentOfCertainSubType: ComponentType<SvelteComponent<{ needsThisProp: string }>> = someLogic() ? Component1 : Component2;\n</script>\n\n<svelte:component this={component} />\n<svelte:component this={componentOfCertainSubType} needsThisProp=\"hello\" />\n```",
        "snippet": "type ComponentType<\n\tComp extends SvelteComponent = SvelteComponent\n> = (new (\n\toptions: ComponentConstructorOptions<\n\t\tComp extends SvelteComponent<infer Props>\n\t\t\t? Props\n\t\t\t: Record<string, any>\n\t>\n) => Comp) & {\n\t/** The custom element version of the component. Only present if compiled with the `customElement` compiler option */\n\telement?: typeof HTMLElement;\n};",
        "children": []
      },
      {
        "name": "EventDispatcher",
        "comment": "",
        "snippet": "interface EventDispatcher<\n\tEventMap extends Record<string, any>\n> {/*…*/}",
        "children": [
          {
            "snippet": "<Type extends keyof EventMap>(\n\t...args: null extends EventMap[Type]\n\t\t? [type: Type, parameter?: EventMap[Type] | null | undefined, options?: DispatchOptions]\n\t\t: undefined extends EventMap[Type]\n\t\t\t? [type: Type, parameter?: EventMap[Type] | null | undefined, options?: DispatchOptions]\n\t\t\t: [type: Type, parameter: EventMap[Type], options?: DispatchOptions]\n): boolean;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "Snippet",
        "comment": "The type of a `#snippet` block. You can use it to (for example) express that your component expects a snippet of a certain type:\n```ts\nlet { banner }: { banner: Snippet<{ text: string }> } = $props();\n```\nYou can only call a snippet through the `{@render ...}` tag.",
        "snippet": "type Snippet<T extends unknown[] = []> =\n\t// this conditional allows tuples but not arrays. Arrays would indicate a\n\t// rest parameter type, which is not supported. If rest parameters are added\n\t// in the future, the condition can be removed.\n\tnumber extends T['length']\n\t\t? never\n\t\t: {\n\t\t\t\t(\n\t\t\t\t\tthis: void,\n\t\t\t\t\t...args: T\n\t\t\t\t): typeof SnippetReturn & {\n\t\t\t\t\t_: 'functions passed to {@render ...} tags must use the `Snippet` type imported from \"svelte\"';\n\t\t\t\t};\n\t\t\t};",
        "children": []
      },
      {
        "name": "SvelteComponent",
        "comment": "Can be used to create strongly typed Svelte components.\n\n#### Example:\n\nYou have component library on npm called `component-library`, from which\nyou export a component called `MyComponent`. For Svelte+TypeScript users,\nyou want to provide typings. Therefore you create a `index.d.ts`:\n```ts\nimport { SvelteComponent } from \"svelte\";\nexport class MyComponent extends SvelteComponent<{foo: string}> {}\n```\nTyping this makes it possible for IDEs like VS Code with the Svelte extension\nto provide intellisense and to use the component like this in a Svelte file\nwith TypeScript:\n```svelte\n<script lang=\"ts\">\n\timport { MyComponent } from \"component-library\";\n</script>\n<MyComponent foo={'bar'} />\n```\n\nThis was the base class for Svelte components in Svelte 4. Svelte 5+ components\nare completely different under the hood. You should only use this type for typing,\nnot actually instantiate components with `new` - use `mount` or `createRoot` instead.\nSee [breaking changes](https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes)\nfor more info.",
        "snippet": "class SvelteComponent<\n\tProps extends Record<string, any> = Record<string, any>,\n\tEvents extends Record<string, any> = any,\n\tSlots extends Record<string, any> = any\n> {/*…*/}",
        "children": [
          {
            "name": "element",
            "snippet": "static element?: typeof HTMLElement;",
            "comment": "The custom element version of the component. Only present if compiled with the `customElement` compiler option",
            "bullets": [],
            "children": []
          },
          {
            "snippet": "[prop: string]: any;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "snippet": "constructor(options: ComponentConstructorOptions<Properties<Props, Slots>>);",
            "comment": "",
            "bullets": [
              "- <span class=\"tag deprecated\">deprecated</span> This constructor only exists when using the `asClassComponent` compatibility helper, which\nis a stop-gap solution. Migrate towards using `mount` or `createRoot` instead. See\nhttps://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more info."
            ],
            "children": []
          },
          {
            "name": "$destroy",
            "snippet": "$destroy(): void;",
            "comment": "",
            "bullets": [
              "- <span class=\"tag deprecated\">deprecated</span> This method only exists when using one of the legacy compatibility helpers, which\nis a stop-gap solution. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes\nfor more info."
            ],
            "children": []
          },
          {
            "name": "$on",
            "snippet": "$on<K extends Extract<keyof Events, string>>(\n\ttype: K,\n\tcallback: (e: Events[K]) => void\n): () => void;",
            "comment": "",
            "bullets": [
              "- <span class=\"tag deprecated\">deprecated</span> This method only exists when using one of the legacy compatibility helpers, which\nis a stop-gap solution. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes\nfor more info."
            ],
            "children": []
          },
          {
            "name": "$set",
            "snippet": "$set(props: Partial<Props>): void;",
            "comment": "",
            "bullets": [
              "- <span class=\"tag deprecated\">deprecated</span> This method only exists when using one of the legacy compatibility helpers, which\nis a stop-gap solution. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes\nfor more info."
            ],
            "children": []
          }
        ]
      },
      {
        "name": "SvelteComponentTyped",
        "snippet": "class SvelteComponentTyped<\n\tProps extends Record<string, any> = Record<string, any>,\n\tEvents extends Record<string, any> = any,\n\tSlots extends Record<string, any> = any\n> extends SvelteComponent<Props, Events, Slots> {}",
        "children": [],
        "deprecated": "Use `SvelteComponent` instead. See TODO for more information."
      }
    ],
    "exports": [
      {
        "name": "afterUpdate",
        "comment": "Schedules a callback to run immediately after the component has been updated.\n\nThe first time the callback runs will be after the initial `onMount`.\n\nIn runes mode use `$effect` instead.\n\nhttps://svelte.dev/docs/svelte#afterupdate",
        "snippet": "function afterUpdate(fn: () => void): void;",
        "children": [],
        "deprecated": "Use `$effect` instead — see https://svelte-5-preview.vercel.app/docs/deprecations#beforeupdate-and-afterupdate"
      },
      {
        "name": "beforeUpdate",
        "comment": "Schedules a callback to run immediately before the component is updated after any state change.\n\nThe first time the callback runs will be before the initial `onMount`.\n\nIn runes mode use `$effect.pre` instead.\n\nhttps://svelte.dev/docs/svelte#beforeupdate",
        "snippet": "function beforeUpdate(fn: () => void): void;",
        "children": [],
        "deprecated": "Use `$effect.pre` instead — see https://svelte-5-preview.vercel.app/docs/deprecations#beforeupdate-and-afterupdate"
      },
      {
        "name": "createEventDispatcher",
        "comment": "Creates an event dispatcher that can be used to dispatch [component events](https://svelte.dev/docs#template-syntax-component-directives-on-eventname).\nEvent dispatchers are functions that can take two arguments: `name` and `detail`.\n\nComponent events created with `createEventDispatcher` create a\n[CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\nThese events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\nThe `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\nproperty and can contain any type of data.\n\nThe event dispatcher can be typed to narrow the allowed event names and the type of the `detail` argument:\n```ts\nconst dispatch = createEventDispatcher<{\n loaded: never; // does not take a detail argument\n change: string; // takes a detail argument of type string, which is required\n optional: number | null; // takes an optional detail argument of type number\n}>();\n```\n\nhttps://svelte.dev/docs/svelte#createeventdispatcher",
        "snippet": "function createEventDispatcher<\n\tEventMap extends Record<string, any> = any\n>(): EventDispatcher<EventMap>;",
        "children": [],
        "deprecated": "Use callback props and/or the `$host()` rune instead — see https://svelte-5-preview.vercel.app/docs/deprecations#createeventdispatcher"
      },
      {
        "name": "flushSync",
        "comment": "Synchronously flushes any pending state changes and those that result from it.",
        "snippet": "function flushSync(fn?: (() => void) | undefined): void;",
        "children": []
      },
      {
        "name": "getAllContexts",
        "comment": "Retrieves the whole context map that belongs to the closest parent component.\nMust be called during component initialisation. Useful, for example, if you\nprogrammatically create a component and want to pass the existing context to it.\n\nhttps://svelte.dev/docs/svelte#getallcontexts",
        "snippet": "function getAllContexts<\n\tT extends Map<any, any> = Map<any, any>\n>(): T;",
        "children": []
      },
      {
        "name": "getContext",
        "comment": "Retrieves the context that belongs to the closest parent component with the specified `key`.\nMust be called during component initialisation.\n\nhttps://svelte.dev/docs/svelte#getcontext",
        "snippet": "function getContext<T>(key: any): T;",
        "children": []
      },
      {
        "name": "hasContext",
        "comment": "Checks whether a given `key` has been set in the context of a parent component.\nMust be called during component initialisation.\n\nhttps://svelte.dev/docs/svelte#hascontext",
        "snippet": "function hasContext(key: any): boolean;",
        "children": []
      },
      {
        "name": "hydrate",
        "comment": "Hydrates a component on the given target and returns the exports and potentially the props (if compiled with `accessors: true`) of the component",
        "snippet": "function hydrate<\n\tProps extends Record<string, any>,\n\tExports extends Record<string, any>,\n\tEvents extends Record<string, any>\n>(\n\tcomponent: ComponentType<\n\t\tSvelteComponent<Props, Events, any>\n\t>,\n\toptions: {\n\t\ttarget: Document | Element | ShadowRoot;\n\t\tprops?: Props | undefined;\n\t\tevents?:\n\t\t\t| {\n\t\t\t\t\t[Property in keyof Events]: (\n\t\t\t\t\t\te: Events[Property]\n\t\t\t\t\t) => any;\n\t\t\t  }\n\t\t\t| undefined;\n\t\tcontext?: Map<any, any> | undefined;\n\t\tintro?: boolean | undefined;\n\t\trecover?: boolean | undefined;\n\t}\n): Exports;",
        "children": []
      },
      {
        "name": "mount",
        "comment": "Mounts a component to the given target and returns the exports and potentially the props (if compiled with `accessors: true`) of the component",
        "snippet": "function mount<\n\tProps extends Record<string, any>,\n\tExports extends Record<string, any>,\n\tEvents extends Record<string, any>\n>(\n\tcomponent: ComponentType<\n\t\tSvelteComponent<Props, Events, any>\n\t>,\n\toptions: {\n\t\ttarget: Document | Element | ShadowRoot;\n\t\tanchor?: Node | undefined;\n\t\tprops?: Props | undefined;\n\t\tevents?:\n\t\t\t| {\n\t\t\t\t\t[Property in keyof Events]: (\n\t\t\t\t\t\te: Events[Property]\n\t\t\t\t\t) => any;\n\t\t\t  }\n\t\t\t| undefined;\n\t\tcontext?: Map<any, any> | undefined;\n\t\tintro?: boolean | undefined;\n\t}\n): Exports;",
        "children": []
      },
      {
        "name": "onDestroy",
        "comment": "Schedules a callback to run immediately before the component is unmounted.\n\nOut of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\nonly one that runs inside a server-side component.\n\nhttps://svelte.dev/docs/svelte#ondestroy",
        "snippet": "function onDestroy(fn: () => any): void;",
        "children": []
      },
      {
        "name": "onMount",
        "comment": "The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\nIt must be called during the component's initialisation (but doesn't need to live *inside* the component;\nit can be called from an external module).\n\nIf a function is returned _synchronously_ from `onMount`, it will be called when the component is unmounted.\n\n`onMount` does not run inside a [server-side component](https://svelte.dev/docs#run-time-server-side-component-api).\n\nhttps://svelte.dev/docs/svelte#onmount",
        "snippet": "function onMount<T>(\n\tfn: () =>\n\t\t| NotFunction<T>\n\t\t| Promise<NotFunction<T>>\n\t\t| (() => any)\n): void;",
        "children": []
      },
      {
        "name": "setContext",
        "comment": "Associates an arbitrary `context` object with the current component and the specified `key`\nand returns that object. The context is then available to children of the component\n(including slotted content) with `getContext`.\n\nLike lifecycle functions, this must be called during component initialisation.\n\nhttps://svelte.dev/docs/svelte#setcontext",
        "snippet": "function setContext<T>(key: any, context: T): T;",
        "children": []
      },
      {
        "name": "tick",
        "comment": "Returns a promise that resolves once any pending state changes have been applied.",
        "snippet": "function tick(): Promise<void>;",
        "children": []
      },
      {
        "name": "unmount",
        "comment": "Unmounts a component that was previously mounted using `mount` or `hydrate`.",
        "snippet": "function unmount(component: Record<string, any>): void;",
        "children": []
      },
      {
        "name": "untrack",
        "comment": "Use `untrack` to prevent something from being treated as an `$effect`/`$derived` dependency.\n\nhttps://svelte-5-preview.vercel.app/docs/functions#untrack",
        "snippet": "function untrack<T>(fn: () => T): T;",
        "children": []
      }
    ]
  },
  {
    "name": "svelte/action",
    "comment": "",
    "types": [
      {
        "name": "Action",
        "comment": "Actions are functions that are called when an element is created.\nYou can use this interface to type such actions.\nThe following example defines an action that only works on `<div>` elements\nand optionally accepts a parameter which it has a default value for:\n```ts\nexport const myAction: Action<HTMLDivElement, { someProperty: boolean } | undefined> = (node, param = { someProperty: true }) => {\n  // ...\n}\n```\n`Action<HTMLDivElement>` and `Action<HTMLDiveElement, undefined>` both signal that the action accepts no parameters.\n\nYou can return an object with methods `update` and `destroy` from the function and type which additional attributes and events it has.\nSee interface `ActionReturn` for more details.\n\nDocs: https://svelte.dev/docs/svelte-action",
        "snippet": "interface Action<\n\tElement = HTMLElement,\n\tParameter = undefined,\n\tAttributes extends Record<string, any> = Record<\n\t\tnever,\n\t\tany\n\t>\n> {/*…*/}",
        "children": [
          {
            "snippet": "<Node extends Element>(\n\t...args: undefined extends Parameter\n\t\t? [node: Node, parameter?: Parameter]\n\t\t: [node: Node, parameter: Parameter]\n): void | ActionReturn<Parameter, Attributes>;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "ActionReturn",
        "comment": "Actions can return an object containing the two properties defined in this interface. Both are optional.\n- update: An action can have a parameter. This method will be called whenever that parameter changes,\n  immediately after Svelte has applied updates to the markup. `ActionReturn` and `ActionReturn<undefined>` both\n  mean that the action accepts no parameters.\n- destroy: Method that is called after the element is unmounted\n\nAdditionally, you can specify which additional attributes and events the action enables on the applied element.\nThis applies to TypeScript typings only and has no effect at runtime.\n\nExample usage:\n```ts\ninterface Attributes {\n\tnewprop?: string;\n\t'on:event': (e: CustomEvent<boolean>) => void;\n}\n\nexport function myAction(node: HTMLElement, parameter: Parameter): ActionReturn<Parameter, Attributes> {\n\t// ...\n\treturn {\n\t\tupdate: (updatedParameter) => {...},\n\t\tdestroy: () => {...}\n\t};\n}\n```\n\nDocs: https://svelte.dev/docs/svelte-action",
        "snippet": "interface ActionReturn<\n\tParameter = undefined,\n\tAttributes extends Record<string, any> = Record<\n\t\tnever,\n\t\tany\n\t>\n> {/*…*/}",
        "children": [
          {
            "name": "update",
            "snippet": "update?: (parameter: Parameter) => void;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "destroy",
            "snippet": "destroy?: () => void;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      }
    ],
    "exports": []
  },
  {
    "name": "svelte/animate",
    "comment": "",
    "types": [
      {
        "name": "AnimationConfig",
        "comment": "",
        "snippet": "interface AnimationConfig {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: (t: number) => number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "css",
            "snippet": "css?: (t: number, u: number) => string;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "tick",
            "snippet": "tick?: (t: number, u: number) => void;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "FlipParams",
        "comment": "",
        "snippet": "interface FlipParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number | ((len: number) => number);",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: (t: number) => number;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      }
    ],
    "exports": [
      {
        "name": "flip",
        "comment": "The flip function calculates the start and end position of an element and animates between them, translating the x and y values.\n`flip` stands for [First, Last, Invert, Play](https://aerotwist.com/blog/flip-your-animations/).\n\nhttps://svelte.dev/docs/svelte-animate#flip",
        "snippet": "function flip(\n\tnode: Element,\n\t{\n\t\tfrom,\n\t\tto\n\t}: {\n\t\tfrom: DOMRect;\n\t\tto: DOMRect;\n\t},\n\tparams?: FlipParams\n): AnimationConfig;",
        "children": []
      }
    ]
  },
  {
    "name": "svelte/compiler",
    "comment": "",
    "types": [
      {
        "name": "CompileError",
        "comment": "",
        "snippet": "class CompileError extends Error {/*…*/}",
        "children": [
          {
            "snippet": "constructor(code: string, message: string, position: [number, number] | undefined);",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "filename",
            "snippet": "filename: CompileError_1['filename'];",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "position",
            "snippet": "position: CompileError_1['position'];",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "start",
            "snippet": "start: CompileError_1['start'];",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "end",
            "snippet": "end: CompileError_1['end'];",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "code",
            "snippet": "code: string;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      }
    ],
    "exports": [
      {
        "name": "VERSION",
        "comment": "The current version, as set in package.json.\n\nhttps://svelte.dev/docs/svelte-compiler#svelte-version",
        "snippet": "const VERSION: string;",
        "children": []
      },
      {
        "name": "compile",
        "comment": "`compile` converts your `.svelte` source code into a JavaScript module that exports a component\n\nhttps://svelte.dev/docs/svelte-compiler#svelte-compile",
        "snippet": "function compile(\n\tsource: string,\n\toptions: CompileOptions\n): CompileResult;",
        "children": []
      },
      {
        "name": "compileModule",
        "comment": "`compileModule` takes your JavaScript source code containing runes, and turns it into a JavaScript module.\n\nhttps://svelte.dev/docs/svelte-compiler#svelte-compile",
        "snippet": "function compileModule(\n\tsource: string,\n\toptions: ModuleCompileOptions\n): CompileResult;",
        "children": []
      },
      {
        "name": "migrate",
        "comment": "Does a best-effort migration of Svelte code towards using runes, event attributes and render tags.\nMay throw an error if the code is too complex to migrate automatically.",
        "snippet": "function migrate(source: string): {\n\tcode: string;\n};",
        "children": []
      },
      {
        "name": "parse",
        "comment": "The parse function parses a component, returning only its abstract syntax tree.\n\nThe `modern` option (`false` by default in Svelte 5) makes the parser return a modern AST instead of the legacy AST.\n`modern` will become `true` by default in Svelte 6, and the option will be removed in Svelte 7.\n\nhttps://svelte.dev/docs/svelte-compiler#svelte-parse",
        "snippet": "function parse(\n\tsource: string,\n\toptions: {\n\t\tfilename?: string;\n\t\tmodern: true;\n\t}\n): Root;",
        "children": []
      },
      {
        "name": "parse",
        "comment": "The parse function parses a component, returning only its abstract syntax tree.\n\nThe `modern` option (`false` by default in Svelte 5) makes the parser return a modern AST instead of the legacy AST.\n`modern` will become `true` by default in Svelte 6, and the option will be removed in Svelte 7.\n\nhttps://svelte.dev/docs/svelte-compiler#svelte-parse",
        "snippet": "function parse(\n\tsource: string,\n\toptions?:\n\t\t| {\n\t\t\t\tfilename?: string | undefined;\n\t\t\t\tmodern?: false | undefined;\n\t\t  }\n\t\t| undefined\n): LegacyRoot;",
        "children": []
      },
      {
        "name": "preprocess",
        "comment": "The preprocess function provides convenient hooks for arbitrarily transforming component source code.\nFor example, it can be used to convert a <style lang=\"sass\"> block into vanilla CSS.\n\nhttps://svelte.dev/docs/svelte-compiler#svelte-preprocess",
        "snippet": "function preprocess(\n\tsource: string,\n\tpreprocessor: PreprocessorGroup | PreprocessorGroup[],\n\toptions?:\n\t\t| {\n\t\t\t\tfilename?: string | undefined;\n\t\t  }\n\t\t| undefined\n): Promise<Processed>;",
        "children": []
      },
      {
        "name": "walk",
        "snippet": "function walk(): never;",
        "children": [],
        "deprecated": "Replace this with `import { walk } from 'estree-walker'`"
      }
    ]
  },
  {
    "name": "svelte/easing",
    "comment": "",
    "types": [],
    "exports": [
      {
        "name": "backIn",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function backIn(t: number): number;",
        "children": []
      },
      {
        "name": "backInOut",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function backInOut(t: number): number;",
        "children": []
      },
      {
        "name": "backOut",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function backOut(t: number): number;",
        "children": []
      },
      {
        "name": "bounceIn",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function bounceIn(t: number): number;",
        "children": []
      },
      {
        "name": "bounceInOut",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function bounceInOut(t: number): number;",
        "children": []
      },
      {
        "name": "bounceOut",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function bounceOut(t: number): number;",
        "children": []
      },
      {
        "name": "circIn",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function circIn(t: number): number;",
        "children": []
      },
      {
        "name": "circInOut",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function circInOut(t: number): number;",
        "children": []
      },
      {
        "name": "circOut",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function circOut(t: number): number;",
        "children": []
      },
      {
        "name": "cubicIn",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function cubicIn(t: number): number;",
        "children": []
      },
      {
        "name": "cubicInOut",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function cubicInOut(t: number): number;",
        "children": []
      },
      {
        "name": "cubicOut",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function cubicOut(t: number): number;",
        "children": []
      },
      {
        "name": "elasticIn",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function elasticIn(t: number): number;",
        "children": []
      },
      {
        "name": "elasticInOut",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function elasticInOut(t: number): number;",
        "children": []
      },
      {
        "name": "elasticOut",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function elasticOut(t: number): number;",
        "children": []
      },
      {
        "name": "expoIn",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function expoIn(t: number): number;",
        "children": []
      },
      {
        "name": "expoInOut",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function expoInOut(t: number): number;",
        "children": []
      },
      {
        "name": "expoOut",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function expoOut(t: number): number;",
        "children": []
      },
      {
        "name": "linear",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function linear(t: number): number;",
        "children": []
      },
      {
        "name": "quadIn",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function quadIn(t: number): number;",
        "children": []
      },
      {
        "name": "quadInOut",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function quadInOut(t: number): number;",
        "children": []
      },
      {
        "name": "quadOut",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function quadOut(t: number): number;",
        "children": []
      },
      {
        "name": "quartIn",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function quartIn(t: number): number;",
        "children": []
      },
      {
        "name": "quartInOut",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function quartInOut(t: number): number;",
        "children": []
      },
      {
        "name": "quartOut",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function quartOut(t: number): number;",
        "children": []
      },
      {
        "name": "quintIn",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function quintIn(t: number): number;",
        "children": []
      },
      {
        "name": "quintInOut",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function quintInOut(t: number): number;",
        "children": []
      },
      {
        "name": "quintOut",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function quintOut(t: number): number;",
        "children": []
      },
      {
        "name": "sineIn",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function sineIn(t: number): number;",
        "children": []
      },
      {
        "name": "sineInOut",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function sineInOut(t: number): number;",
        "children": []
      },
      {
        "name": "sineOut",
        "comment": "https://svelte.dev/docs/svelte-easing",
        "snippet": "function sineOut(t: number): number;",
        "children": []
      }
    ]
  },
  {
    "name": "svelte/legacy",
    "comment": "",
    "types": [],
    "exports": [
      {
        "name": "asClassComponent",
        "comment": "Takes the component function and returns a Svelte 4 compatible component constructor.",
        "snippet": "function asClassComponent<\n\tProps extends Record<string, any>,\n\tExports extends Record<string, any>,\n\tEvents extends Record<string, any>,\n\tSlots extends Record<string, any>\n>(\n\tcomponent: import('svelte').SvelteComponent<\n\t\tProps,\n\t\tEvents,\n\t\tSlots\n\t>\n): import('svelte').ComponentType<\n\timport('svelte').SvelteComponent<Props, Events, Slots> &\n\t\tExports\n>;",
        "children": [],
        "deprecated": "Use this only as a temporary solution to migrate your imperative component code to Svelte 5."
      },
      {
        "name": "createClassComponent",
        "comment": "Takes the same options as a Svelte 4 component and the component function and returns a Svelte 4 compatible component.",
        "snippet": "function createClassComponent<\n\tProps extends Record<string, any>,\n\tExports extends Record<string, any>,\n\tEvents extends Record<string, any>,\n\tSlots extends Record<string, any>\n>(\n\toptions: import('svelte').ComponentConstructorOptions<Props> & {\n\t\tcomponent: import('svelte').ComponentType<\n\t\t\timport('svelte').SvelteComponent<Props, Events, Slots>\n\t\t>;\n\t\timmutable?: boolean | undefined;\n\t\thydrate?: boolean | undefined;\n\t\trecover?: boolean | undefined;\n\t}\n): import('svelte').SvelteComponent<Props, Events, Slots> &\n\tExports;",
        "children": [],
        "deprecated": "Use this only as a temporary solution to migrate your imperative component code to Svelte 5."
      },
      {
        "name": "run",
        "comment": "Runs the given function once immediately on the server, and works like `$effect.pre` on the client.",
        "snippet": "function run(fn: () => void | (() => void)): void;",
        "children": [],
        "deprecated": "Use this only as a temporary solution to migrate your component code to Svelte 5."
      }
    ]
  },
  {
    "name": "svelte/motion",
    "comment": "",
    "types": [
      {
        "name": "Spring",
        "comment": "",
        "snippet": "interface Spring<T> extends Readable<T> {/*…*/}",
        "children": [
          {
            "name": "set",
            "snippet": "set: (new_value: T, opts?: SpringUpdateOpts) => Promise<void>;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "update",
            "snippet": "update: (fn: Updater<T>, opts?: SpringUpdateOpts) => Promise<void>;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "precision",
            "snippet": "precision: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "damping",
            "snippet": "damping: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "stiffness",
            "snippet": "stiffness: number;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "Tweened",
        "comment": "",
        "snippet": "interface Tweened<T> extends Readable<T> {/*…*/}",
        "children": [
          {
            "name": "set",
            "snippet": "set(value: T, opts?: TweenedOptions<T>): Promise<void>;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "update",
            "snippet": "update(updater: Updater<T>, opts?: TweenedOptions<T>): Promise<void>;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      }
    ],
    "exports": [
      {
        "name": "spring",
        "comment": "The spring function in Svelte creates a store whose value is animated, with a motion that simulates the behavior of a spring. This means when the value changes, instead of transitioning at a steady rate, it \"bounces\" like a spring would, depending on the physics parameters provided. This adds a level of realism to the transitions and can enhance the user experience.\n\nhttps://svelte.dev/docs/svelte-motion#spring",
        "snippet": "function spring<T = any>(\n\tvalue?: T | undefined,\n\topts?: SpringOpts | undefined\n): Spring<T>;",
        "children": []
      },
      {
        "name": "tweened",
        "comment": "A tweened store in Svelte is a special type of store that provides smooth transitions between state values over time.\n\nhttps://svelte.dev/docs/svelte-motion#tweened",
        "snippet": "function tweened<T>(\n\tvalue?: T | undefined,\n\tdefaults?: TweenedOptions<T> | undefined\n): Tweened<T>;",
        "children": []
      }
    ]
  },
  {
    "name": "svelte/reactivity",
    "comment": "",
    "types": [],
    "exports": []
  },
  {
    "name": "svelte/server",
    "comment": "",
    "types": [],
    "exports": [
      {
        "name": "render",
        "comment": "",
        "snippet": "function render(\n\tcomponent: typeof import('svelte').SvelteComponent,\n\toptions: {\n\t\tprops: Record<string, any>;\n\t\tcontext?: Map<any, any>;\n\t}\n): RenderOutput;",
        "children": []
      }
    ]
  },
  {
    "name": "svelte/store",
    "comment": "",
    "types": [
      {
        "name": "Readable",
        "comment": "Readable interface for subscribing.",
        "snippet": "interface Readable<T> {/*…*/}",
        "children": [
          {
            "name": "subscribe",
            "snippet": "subscribe(this: void, run: Subscriber<T>, invalidate?: Invalidator<T>): Unsubscriber;",
            "comment": "Subscribe on value changes.",
            "bullets": [
              "- `run` subscription callback",
              "- `invalidate` cleanup callback"
            ],
            "children": []
          }
        ]
      },
      {
        "name": "StartStopNotifier",
        "comment": "Start and stop notification callbacks.\nThis function is called when the first subscriber subscribes.",
        "snippet": "type StartStopNotifier<T> = (\n\tset: (value: T) => void,\n\tupdate: (fn: Updater<T>) => void\n) => void | (() => void);",
        "children": []
      },
      {
        "name": "Subscriber",
        "comment": "Callback to inform of a value updates.",
        "snippet": "type Subscriber<T> = (value: T) => void;",
        "children": []
      },
      {
        "name": "Unsubscriber",
        "comment": "Unsubscribes from value updates.",
        "snippet": "type Unsubscriber = () => void;",
        "children": []
      },
      {
        "name": "Updater",
        "comment": "Callback to update a value.",
        "snippet": "type Updater<T> = (value: T) => T;",
        "children": []
      },
      {
        "name": "Writable",
        "comment": "Writable interface for both updating and subscribing.",
        "snippet": "interface Writable<T> extends Readable<T> {/*…*/}",
        "children": [
          {
            "name": "set",
            "snippet": "set(this: void, value: T): void;",
            "comment": "Set value and inform subscribers.",
            "bullets": [
              "- `value` to set"
            ],
            "children": []
          },
          {
            "name": "update",
            "snippet": "update(this: void, updater: Updater<T>): void;",
            "comment": "Update value using callback and inform subscribers.",
            "bullets": [
              "- `updater` callback"
            ],
            "children": []
          }
        ]
      }
    ],
    "exports": [
      {
        "name": "derived",
        "comment": "Derived value store by synchronizing one or more readable stores and\napplying an aggregation function over its input values.\n\nhttps://svelte.dev/docs/svelte-store#derived",
        "snippet": "function derived<S extends Stores, T>(\n\tstores: S,\n\tfn: (\n\t\tvalues: StoresValues<S>,\n\t\tset: (value: T) => void,\n\t\tupdate: (fn: Updater<T>) => void\n\t) => Unsubscriber | void,\n\tinitial_value?: T | undefined\n): Readable<T>;",
        "children": []
      },
      {
        "name": "derived",
        "comment": "Derived value store by synchronizing one or more readable stores and\napplying an aggregation function over its input values.\n\nhttps://svelte.dev/docs/svelte-store#derived",
        "snippet": "function derived<S extends Stores, T>(\n\tstores: S,\n\tfn: (values: StoresValues<S>) => T,\n\tinitial_value?: T | undefined\n): Readable<T>;",
        "children": []
      },
      {
        "name": "get",
        "comment": "Get the current value from a store by subscribing and immediately unsubscribing.\n\nhttps://svelte.dev/docs/svelte-store#get",
        "snippet": "function get<T>(store: Readable<T>): T;",
        "children": []
      },
      {
        "name": "readable",
        "comment": "Creates a `Readable` store that allows reading by subscription.\n\nhttps://svelte.dev/docs/svelte-store#readable",
        "snippet": "function readable<T>(\n\tvalue?: T | undefined,\n\tstart?: StartStopNotifier<T> | undefined\n): Readable<T>;",
        "children": []
      },
      {
        "name": "readonly",
        "comment": "Takes a store and returns a new one derived from the old one that is readable.\n\nhttps://svelte.dev/docs/svelte-store#readonly",
        "snippet": "function readonly<T>(store: Readable<T>): Readable<T>;",
        "children": []
      },
      {
        "name": "safe_not_equal",
        "comment": "",
        "snippet": "function safe_not_equal(a: any, b: any): boolean;",
        "children": []
      },
      {
        "name": "writable",
        "comment": "Create a `Writable` store that allows both updating and reading by subscription.\n\nhttps://svelte.dev/docs/svelte-store#writable",
        "snippet": "function writable<T>(\n\tvalue?: T | undefined,\n\tstart?: StartStopNotifier<T> | undefined\n): Writable<T>;",
        "children": []
      }
    ]
  },
  {
    "name": "svelte/transition",
    "comment": "",
    "types": [
      {
        "name": "BlurParams",
        "comment": "",
        "snippet": "interface BlurParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "amount",
            "snippet": "amount?: number | string;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "opacity",
            "snippet": "opacity?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "CrossfadeParams",
        "comment": "",
        "snippet": "interface CrossfadeParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number | ((len: number) => number);",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "DrawParams",
        "comment": "",
        "snippet": "interface DrawParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "speed",
            "snippet": "speed?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number | ((len: number) => number);",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "EasingFunction",
        "comment": "",
        "snippet": "type EasingFunction = (t: number) => number;",
        "children": []
      },
      {
        "name": "FadeParams",
        "comment": "",
        "snippet": "interface FadeParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "FlyParams",
        "comment": "",
        "snippet": "interface FlyParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "x",
            "snippet": "x?: number | string;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "y",
            "snippet": "y?: number | string;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "opacity",
            "snippet": "opacity?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "ScaleParams",
        "comment": "",
        "snippet": "interface ScaleParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "start",
            "snippet": "start?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "opacity",
            "snippet": "opacity?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "SlideParams",
        "comment": "",
        "snippet": "interface SlideParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "axis",
            "snippet": "axis?: 'x' | 'y';",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "TransitionConfig",
        "comment": "",
        "snippet": "interface TransitionConfig {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "css",
            "snippet": "css?: (t: number, u: number) => string;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "tick",
            "snippet": "tick?: (t: number, u: number) => void;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      }
    ],
    "exports": [
      {
        "name": "blur",
        "comment": "Animates a `blur` filter alongside an element's opacity.\n\nhttps://svelte.dev/docs/svelte-transition#blur",
        "snippet": "function blur(\n\tnode: Element,\n\t{\n\t\tdelay,\n\t\tduration,\n\t\teasing,\n\t\tamount,\n\t\topacity\n\t}?: BlurParams | undefined\n): TransitionConfig;",
        "children": []
      },
      {
        "name": "crossfade",
        "comment": "The `crossfade` function creates a pair of [transitions](https://svelte.dev/docs#template-syntax-element-directives-transition-fn) called `send` and `receive`. When an element is 'sent', it looks for a corresponding element being 'received', and generates a transition that transforms the element to its counterpart's position and fades it out. When an element is 'received', the reverse happens. If there is no counterpart, the `fallback` transition is used.\n\nhttps://svelte.dev/docs/svelte-transition#crossfade",
        "snippet": "function crossfade({\n\tfallback,\n\t...defaults\n}: CrossfadeParams & {\n\tfallback?: (\n\t\tnode: Element,\n\t\tparams: CrossfadeParams,\n\t\tintro: boolean\n\t) => TransitionConfig;\n}): [\n\t(\n\t\tnode: any,\n\t\tparams: CrossfadeParams & {\n\t\t\tkey: any;\n\t\t}\n\t) => () => TransitionConfig,\n\t(\n\t\tnode: any,\n\t\tparams: CrossfadeParams & {\n\t\t\tkey: any;\n\t\t}\n\t) => () => TransitionConfig\n];",
        "children": []
      },
      {
        "name": "draw",
        "comment": "Animates the stroke of an SVG element, like a snake in a tube. `in` transitions begin with the path invisible and draw the path to the screen over time. `out` transitions start in a visible state and gradually erase the path. `draw` only works with elements that have a `getTotalLength` method, like `<path>` and `<polyline>`.\n\nhttps://svelte.dev/docs/svelte-transition#draw",
        "snippet": "function draw(\n\tnode: SVGElement & {\n\t\tgetTotalLength(): number;\n\t},\n\t{\n\t\tdelay,\n\t\tspeed,\n\t\tduration,\n\t\teasing\n\t}?: DrawParams | undefined\n): TransitionConfig;",
        "children": []
      },
      {
        "name": "fade",
        "comment": "Animates the opacity of an element from 0 to the current opacity for `in` transitions and from the current opacity to 0 for `out` transitions.\n\nhttps://svelte.dev/docs/svelte-transition#fade",
        "snippet": "function fade(\n\tnode: Element,\n\t{ delay, duration, easing }?: FadeParams | undefined\n): TransitionConfig;",
        "children": []
      },
      {
        "name": "fly",
        "comment": "Animates the x and y positions and the opacity of an element. `in` transitions animate from the provided values, passed as parameters to the element's default values. `out` transitions animate from the element's default values to the provided values.\n\nhttps://svelte.dev/docs/svelte-transition#fly",
        "snippet": "function fly(\n\tnode: Element,\n\t{\n\t\tdelay,\n\t\tduration,\n\t\teasing,\n\t\tx,\n\t\ty,\n\t\topacity\n\t}?: FlyParams | undefined\n): TransitionConfig;",
        "children": []
      },
      {
        "name": "scale",
        "comment": "Animates the opacity and scale of an element. `in` transitions animate from an element's current (default) values to the provided values, passed as parameters. `out` transitions animate from the provided values to an element's default values.\n\nhttps://svelte.dev/docs/svelte-transition#scale",
        "snippet": "function scale(\n\tnode: Element,\n\t{\n\t\tdelay,\n\t\tduration,\n\t\teasing,\n\t\tstart,\n\t\topacity\n\t}?: ScaleParams | undefined\n): TransitionConfig;",
        "children": []
      },
      {
        "name": "slide",
        "comment": "Slides an element in and out.\n\nhttps://svelte.dev/docs/svelte-transition#slide",
        "snippet": "function slide(\n\tnode: Element,\n\t{\n\t\tdelay,\n\t\tduration,\n\t\teasing,\n\t\taxis\n\t}?: SlideParams | undefined\n): TransitionConfig;",
        "children": []
      }
    ]
  }
]);
